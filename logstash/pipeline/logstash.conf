input {
  redis {
    host => 'ip-172-31-39-118.ec2.internal'
    db => 0
    port => 6379
    data_type => 'list'
    key => 'test'
    codec => 'plain'
  }
}
 
 
filter {
  grok {
    match => { "message" => "%{DATE_EU:date}\t%{TIME:time}\t%{WORD:x_edge_location}\t(?:%{NUMBER:sc_bytes:int}|-)\t%{IPORHOST:c_ip}\t%{WORD:cs_method}\t%{HOSTNAME:cs_host}\t%{NOTSPACE:cs_uri_stem}\t%{NUMBER:sc_status:int}\t%{GREEDYDATA:referrer}\t%{GREEDYDATA:User_Agent}\t%{GREEDYDATA:cs_uri_query}\t%{GREEDYDATA:cookies}\t%{WORD:x_edge_result_type}\t%{NOTSPACE:x_edge_request_id}\t%{HOSTNAME:x_host_header}\t%{URIPROTO:cs_protocol}\t%{INT:cs_bytes:int}\t%{GREEDYDATA:time_taken}\t%{GREEDYDATA:x_forwarded_for}\t%{GREEDYDATA:ssl_protocol}\t%{GREEDYDATA:ssl_cipher}\t%{GREEDYDATA:x_edge_response_result_type}" }
  }

  if "_grokparsefailure" in [tags] {
    drop { }
  }
 
  mutate {
    add_field => [ "listener_timestamp", "%{date} %{time}" ]
  }
 
  date {
    match => [ "listener_timestamp", "yy-MM-dd HH:mm:ss" ]
    target => "@timestamp"
  }
 
  geoip {
    source => "c_ip"
    add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
    add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
}
 
  useragent {
    source => "user_agent"
    target => "useragent"
  }
 
  mutate {
    remove_field => ["date", "time", "listener_timestamp", "cloudfront_version", "message", "cloudfront_fields", "User_Agent"]
  }
}
 
output{
   elasticsearch {
   hosts => ["elk-1896668843.us-east-1.elb.amazonaws.com:80"]
   sniffing => false
   index => "cloudfront-logs-%{+YYYY.MM.dd}"
   template => "/usr/share/logstash/config/mapping.json"
   template_name => "cloudfront" 
}
}
